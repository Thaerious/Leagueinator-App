//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./StyleLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StyleLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPAR=1, MULT_SELECTOR=2, CLASS_SELECTOR=3, ID_SELECTOR=4, TAG_SELECTOR=5, 
		ALL_SELECTOR=6, COMMA=7, GT=8, I_DIR=9, QUOTED_STRING=10, COMMENT=11, 
		WS=12, NL=13, K_COMMENT=14, KEY=15, COLON=16, CPAR=17, MM_WS=18, SEMI=19, 
		VALUE=20, VM_WS=21, NEWLINE=22, COMMENT_VALUE=23;
	public const int
		KEY_MODE=1, VALUE_MODE=2, COMMENT_MODE=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "KEY_MODE", "VALUE_MODE", "COMMENT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPAR", "MULT_SELECTOR", "CLASS_SELECTOR", "ID_SELECTOR", "TAG_SELECTOR", 
		"ALL_SELECTOR", "COMMA", "GT", "I_DIR", "QUOTED_STRING", "COMMENT", "STRING", 
		"WS", "NL", "K_COMMENT", "KEY", "COLON", "CPAR", "MM_WS", "SEMI", "VALUE", 
		"VM_WS", "NEWLINE", "COMMENT_VALUE"
	};


	public StyleLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public StyleLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", null, null, null, null, "'*'", "','", "'>'", "'@import'", 
		null, null, null, null, null, null, "':'", "'}'", null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPAR", "MULT_SELECTOR", "CLASS_SELECTOR", "ID_SELECTOR", "TAG_SELECTOR", 
		"ALL_SELECTOR", "COMMA", "GT", "I_DIR", "QUOTED_STRING", "COMMENT", "WS", 
		"NL", "K_COMMENT", "KEY", "COLON", "CPAR", "MM_WS", "SEMI", "VALUE", "VM_WS", 
		"NEWLINE", "COMMENT_VALUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StyleLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StyleLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,23,171,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,
		2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
		2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
		2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,9,1,9,5,9,85,8,9,10,9,12,9,88,9,9,1,9,1,9,1,10,1,
		10,1,10,1,10,1,10,1,11,3,11,98,8,11,1,11,4,11,101,8,11,11,11,12,11,102,
		1,12,4,12,106,8,12,11,12,12,12,107,1,12,1,12,1,13,4,13,113,8,13,11,13,
		12,13,114,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,4,15,125,8,15,11,15,
		12,15,126,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,4,18,138,8,18,11,
		18,12,18,139,1,18,1,18,1,19,1,19,1,19,1,19,1,20,4,20,149,8,20,11,20,12,
		20,150,1,21,4,21,154,8,21,11,21,12,21,155,1,21,1,21,1,22,4,22,161,8,22,
		11,22,12,22,162,1,22,1,22,1,23,4,23,168,8,23,11,23,12,23,169,0,0,24,4,
		1,6,2,8,3,10,4,12,5,14,6,16,7,18,8,20,9,22,10,24,11,26,0,28,12,30,13,32,
		14,34,15,36,16,38,17,40,18,42,19,44,20,46,21,48,22,50,23,4,0,1,2,3,10,
		1,0,34,34,2,0,65,90,97,122,5,0,45,45,48,57,65,90,95,95,97,122,2,0,9,9,
		32,32,2,0,10,10,13,13,4,0,45,45,65,90,95,95,97,122,3,0,9,10,13,13,32,32,
		3,0,9,10,13,13,59,59,2,0,9,10,13,13,1,0,10,10,177,0,4,1,0,0,0,0,6,1,0,
		0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,
		18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,28,1,0,0,0,0,30,1,
		0,0,0,1,32,1,0,0,0,1,34,1,0,0,0,1,36,1,0,0,0,1,38,1,0,0,0,1,40,1,0,0,0,
		2,42,1,0,0,0,2,44,1,0,0,0,2,46,1,0,0,0,3,48,1,0,0,0,3,50,1,0,0,0,4,52,
		1,0,0,0,6,56,1,0,0,0,8,60,1,0,0,0,10,63,1,0,0,0,12,66,1,0,0,0,14,68,1,
		0,0,0,16,70,1,0,0,0,18,72,1,0,0,0,20,74,1,0,0,0,22,82,1,0,0,0,24,91,1,
		0,0,0,26,97,1,0,0,0,28,105,1,0,0,0,30,112,1,0,0,0,32,118,1,0,0,0,34,124,
		1,0,0,0,36,128,1,0,0,0,38,132,1,0,0,0,40,137,1,0,0,0,42,143,1,0,0,0,44,
		148,1,0,0,0,46,153,1,0,0,0,48,160,1,0,0,0,50,167,1,0,0,0,52,53,5,123,0,
		0,53,54,1,0,0,0,54,55,6,0,0,0,55,5,1,0,0,0,56,57,3,26,11,0,57,58,5,46,
		0,0,58,59,3,26,11,0,59,7,1,0,0,0,60,61,5,46,0,0,61,62,3,26,11,0,62,9,1,
		0,0,0,63,64,5,35,0,0,64,65,3,26,11,0,65,11,1,0,0,0,66,67,3,26,11,0,67,
		13,1,0,0,0,68,69,5,42,0,0,69,15,1,0,0,0,70,71,5,44,0,0,71,17,1,0,0,0,72,
		73,5,62,0,0,73,19,1,0,0,0,74,75,5,64,0,0,75,76,5,105,0,0,76,77,5,109,0,
		0,77,78,5,112,0,0,78,79,5,111,0,0,79,80,5,114,0,0,80,81,5,116,0,0,81,21,
		1,0,0,0,82,86,5,34,0,0,83,85,8,0,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,
		1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,90,5,34,0,0,90,23,
		1,0,0,0,91,92,5,47,0,0,92,93,5,47,0,0,93,94,1,0,0,0,94,95,6,10,1,0,95,
		25,1,0,0,0,96,98,7,1,0,0,97,96,1,0,0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,
		101,7,2,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,
		0,0,103,27,1,0,0,0,104,106,7,3,0,0,105,104,1,0,0,0,106,107,1,0,0,0,107,
		105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,6,12,2,0,110,29,1,
		0,0,0,111,113,7,4,0,0,112,111,1,0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,
		114,115,1,0,0,0,115,116,1,0,0,0,116,117,6,13,2,0,117,31,1,0,0,0,118,119,
		5,47,0,0,119,120,5,47,0,0,120,121,1,0,0,0,121,122,6,14,1,0,122,33,1,0,
		0,0,123,125,7,5,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,
		127,1,0,0,0,127,35,1,0,0,0,128,129,5,58,0,0,129,130,1,0,0,0,130,131,6,
		16,3,0,131,37,1,0,0,0,132,133,5,125,0,0,133,134,1,0,0,0,134,135,6,17,4,
		0,135,39,1,0,0,0,136,138,7,6,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,
		1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,6,18,2,0,142,41,1,0,0,
		0,143,144,5,59,0,0,144,145,1,0,0,0,145,146,6,19,4,0,146,43,1,0,0,0,147,
		149,8,7,0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,
		0,0,0,151,45,1,0,0,0,152,154,7,8,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,
		153,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,158,6,21,2,0,158,47,1,
		0,0,0,159,161,7,9,0,0,160,159,1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,
		162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,22,4,0,165,49,1,0,0,0,166,168,
		8,9,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,
		0,170,51,1,0,0,0,16,0,1,2,3,86,97,102,107,114,124,126,139,150,155,162,
		169,5,5,1,0,5,3,0,6,0,0,5,2,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
