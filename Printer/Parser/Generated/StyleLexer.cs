//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./StyleLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StyleLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPAR=1, DOT=2, HASH=3, STAR=4, COMMA=5, AT=6, GT=7, STRING=8, WS=9, COMMENT=10, 
		KEY=11, COLON=12, CPAR=13, MM_WS=14, SEMI=15, VALUE=16, VM_WS=17, NEWLINE=18, 
		COMMENT_VALUE=19;
	public const int
		KEY_MODE=1, VALUE_MODE=2, COMMENT_MODE=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "KEY_MODE", "VALUE_MODE", "COMMENT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPAR", "DOT", "HASH", "STAR", "COMMA", "AT", "GT", "STRING", "WS", "COMMENT", 
		"KEY", "COLON", "CPAR", "MM_WS", "SEMI", "VALUE", "VM_WS", "NEWLINE", 
		"COMMENT_VALUE"
	};


	public StyleLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public StyleLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'.'", "'#'", "'*'", "','", "'@'", "'>'", null, null, null, 
		null, "':'", "'}'", null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPAR", "DOT", "HASH", "STAR", "COMMA", "AT", "GT", "STRING", "WS", 
		"COMMENT", "KEY", "COLON", "CPAR", "MM_WS", "SEMI", "VALUE", "VM_WS", 
		"NEWLINE", "COMMENT_VALUE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StyleLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StyleLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,126,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,
		2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
		2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,
		0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,3,7,60,8,7,1,
		7,4,7,63,8,7,11,7,12,7,64,1,8,4,8,68,8,8,11,8,12,8,69,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,10,4,10,80,8,10,11,10,12,10,81,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,13,4,13,93,8,13,11,13,12,13,94,1,13,1,13,1,14,1,14,1,
		14,1,14,1,15,4,15,104,8,15,11,15,12,15,105,1,16,4,16,109,8,16,11,16,12,
		16,110,1,16,1,16,1,17,4,17,116,8,17,11,17,12,17,117,1,17,1,17,1,18,4,18,
		123,8,18,11,18,12,18,124,0,0,19,4,1,6,2,8,3,10,4,12,5,14,6,16,7,18,8,20,
		9,22,10,24,11,26,12,28,13,30,14,32,15,34,16,36,17,38,18,40,19,4,0,1,2,
		3,7,2,0,65,90,97,122,5,0,45,45,48,57,65,90,95,95,97,122,3,0,9,10,13,13,
		32,32,4,0,45,45,65,90,95,95,97,122,3,0,9,10,13,13,59,59,2,0,9,10,13,13,
		1,0,10,10,131,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,
		0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,1,22,1,0,0,0,
		1,24,1,0,0,0,1,26,1,0,0,0,1,28,1,0,0,0,1,30,1,0,0,0,2,32,1,0,0,0,2,34,
		1,0,0,0,2,36,1,0,0,0,3,38,1,0,0,0,3,40,1,0,0,0,4,42,1,0,0,0,6,46,1,0,0,
		0,8,48,1,0,0,0,10,50,1,0,0,0,12,52,1,0,0,0,14,54,1,0,0,0,16,56,1,0,0,0,
		18,59,1,0,0,0,20,67,1,0,0,0,22,73,1,0,0,0,24,79,1,0,0,0,26,83,1,0,0,0,
		28,87,1,0,0,0,30,92,1,0,0,0,32,98,1,0,0,0,34,103,1,0,0,0,36,108,1,0,0,
		0,38,115,1,0,0,0,40,122,1,0,0,0,42,43,5,123,0,0,43,44,1,0,0,0,44,45,6,
		0,0,0,45,5,1,0,0,0,46,47,5,46,0,0,47,7,1,0,0,0,48,49,5,35,0,0,49,9,1,0,
		0,0,50,51,5,42,0,0,51,11,1,0,0,0,52,53,5,44,0,0,53,13,1,0,0,0,54,55,5,
		64,0,0,55,15,1,0,0,0,56,57,5,62,0,0,57,17,1,0,0,0,58,60,7,0,0,0,59,58,
		1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,63,7,1,0,0,62,61,1,0,0,0,63,64,
		1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,19,1,0,0,0,66,68,7,2,0,0,67,66,
		1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,
		6,8,1,0,72,21,1,0,0,0,73,74,5,47,0,0,74,75,5,47,0,0,75,76,1,0,0,0,76,77,
		6,9,2,0,77,23,1,0,0,0,78,80,7,3,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,
		1,0,0,0,81,82,1,0,0,0,82,25,1,0,0,0,83,84,5,58,0,0,84,85,1,0,0,0,85,86,
		6,11,3,0,86,27,1,0,0,0,87,88,5,125,0,0,88,89,1,0,0,0,89,90,6,12,4,0,90,
		29,1,0,0,0,91,93,7,2,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,
		95,1,0,0,0,95,96,1,0,0,0,96,97,6,13,1,0,97,31,1,0,0,0,98,99,5,59,0,0,99,
		100,1,0,0,0,100,101,6,14,4,0,101,33,1,0,0,0,102,104,8,4,0,0,103,102,1,
		0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,35,1,0,0,0,107,
		109,7,5,0,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,
		0,0,0,111,112,1,0,0,0,112,113,6,16,1,0,113,37,1,0,0,0,114,116,7,6,0,0,
		115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,119,
		1,0,0,0,119,120,6,17,4,0,120,39,1,0,0,0,121,123,8,6,0,0,122,121,1,0,0,
		0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,41,1,0,0,0,14,0,
		1,2,3,59,64,69,79,81,94,105,110,117,124,5,5,1,0,6,0,0,5,3,0,5,2,0,4,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
