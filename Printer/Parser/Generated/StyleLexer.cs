//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from StyleLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StyleLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPAR=1, DOT=2, HASH=3, STRING=4, WS=5, KEY=6, COLON=7, CPAR=8, MM_WS=9, 
		SEMI=10, VALUE=11, VM_WS=12;
	public const int
		KEY_MODE=1, VALUE_MODE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "KEY_MODE", "VALUE_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPAR", "DOT", "HASH", "STRING", "WS", "KEY", "COLON", "CPAR", "MM_WS", 
		"SEMI", "VALUE", "VM_WS"
	};


	public StyleLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public StyleLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'.'", "'#'", null, null, null, "':'", "'}'", null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPAR", "DOT", "HASH", "STRING", "WS", "KEY", "COLON", "CPAR", "MM_WS", 
		"SEMI", "VALUE", "VM_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StyleLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StyleLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,83,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,
		5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,
		1,1,1,1,1,2,1,2,1,3,4,3,37,8,3,11,3,12,3,38,1,4,4,4,42,8,4,11,4,12,4,43,
		1,4,1,4,1,5,4,5,49,8,5,11,5,12,5,50,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
		8,4,8,62,8,8,11,8,12,8,63,1,8,1,8,1,9,1,9,1,9,1,9,1,10,4,10,73,8,10,11,
		10,12,10,74,1,11,4,11,78,8,11,11,11,12,11,79,1,11,1,11,0,0,12,3,1,5,2,
		7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,3,0,1,2,5,2,0,65,90,
		97,122,3,0,9,10,13,13,32,32,4,0,45,45,65,90,95,95,97,122,3,0,9,10,13,13,
		59,59,2,0,9,10,13,13,86,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,1,13,1,0,0,0,1,15,1,0,0,0,1,17,1,0,0,0,1,19,1,0,0,0,2,21,
		1,0,0,0,2,23,1,0,0,0,2,25,1,0,0,0,3,27,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,
		0,9,36,1,0,0,0,11,41,1,0,0,0,13,48,1,0,0,0,15,52,1,0,0,0,17,56,1,0,0,0,
		19,61,1,0,0,0,21,67,1,0,0,0,23,72,1,0,0,0,25,77,1,0,0,0,27,28,5,123,0,
		0,28,29,1,0,0,0,29,30,6,0,0,0,30,4,1,0,0,0,31,32,5,46,0,0,32,6,1,0,0,0,
		33,34,5,35,0,0,34,8,1,0,0,0,35,37,7,0,0,0,36,35,1,0,0,0,37,38,1,0,0,0,
		38,36,1,0,0,0,38,39,1,0,0,0,39,10,1,0,0,0,40,42,7,1,0,0,41,40,1,0,0,0,
		42,43,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,45,1,0,0,0,45,46,6,4,1,0,
		46,12,1,0,0,0,47,49,7,2,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,
		50,51,1,0,0,0,51,14,1,0,0,0,52,53,5,58,0,0,53,54,1,0,0,0,54,55,6,6,2,0,
		55,16,1,0,0,0,56,57,5,125,0,0,57,58,1,0,0,0,58,59,6,7,3,0,59,18,1,0,0,
		0,60,62,7,1,0,0,61,60,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,
		0,64,65,1,0,0,0,65,66,6,8,1,0,66,20,1,0,0,0,67,68,5,59,0,0,68,69,1,0,0,
		0,69,70,6,9,3,0,70,22,1,0,0,0,71,73,8,3,0,0,72,71,1,0,0,0,73,74,1,0,0,
		0,74,72,1,0,0,0,74,75,1,0,0,0,75,24,1,0,0,0,76,78,7,4,0,0,77,76,1,0,0,
		0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,82,6,11,1,
		0,82,26,1,0,0,0,10,0,1,2,38,43,48,50,63,74,79,4,5,1,0,6,0,0,5,2,0,4,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
