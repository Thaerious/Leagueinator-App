//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./StyleParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class StyleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPAR=1, DOT=2, HASH=3, STRING=4, WS=5, KEY=6, COLON=7, CPAR=8, MM_WS=9, 
		SEMI=10, VALUE=11, VM_WS=12;
	public const int
		RULE_styles = 0, RULE_style = 1, RULE_selector = 2, RULE_property = 3;
	public static readonly string[] ruleNames = {
		"styles", "style", "selector", "property"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'.'", "'#'", null, null, null, "':'", "'}'", null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPAR", "DOT", "HASH", "STRING", "WS", "KEY", "COLON", "CPAR", "MM_WS", 
		"SEMI", "VALUE", "VM_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StyleParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StyleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StyleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StyleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StylesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(StyleParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StyleContext[] style() {
			return GetRuleContexts<StyleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StyleContext style(int i) {
			return GetRuleContext<StyleContext>(i);
		}
		public StylesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_styles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.EnterStyles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.ExitStyles(this);
		}
	}

	[RuleVersion(0)]
	public StylesContext styles() {
		StylesContext _localctx = new StylesContext(Context, State);
		EnterRule(_localctx, 0, RULE_styles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) {
				{
				{
				State = 8;
				style();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 14;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAR() { return GetToken(StyleParser.OPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAR() { return GetToken(StyleParser.CPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_style; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.EnterStyle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.ExitStyle(this);
		}
	}

	[RuleVersion(0)]
	public StyleContext style() {
		StyleContext _localctx = new StyleContext(Context, State);
		EnterRule(_localctx, 2, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			selector();
			State = 17;
			Match(OPAR);
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 18;
				property();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 24;
			Match(CPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StyleParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StyleParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(StyleParser.HASH, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 4, RULE_selector);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				Match(STRING);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				Match(DOT);
				State = 28;
				Match(STRING);
				}
				break;
			case HASH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29;
				Match(HASH);
				State = 30;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(StyleParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StyleParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(StyleParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(StyleParser.SEMI, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStyleParserListener typedListener = listener as IStyleParserListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(KEY);
			State = 34;
			Match(COLON);
			State = 35;
			Match(VALUE);
			State = 36;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,39,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,5,0,10,8,0,10,0,12,0,13,
		9,0,1,0,1,0,1,1,1,1,1,1,5,1,20,8,1,10,1,12,1,23,9,1,1,1,1,1,1,2,1,2,1,
		2,1,2,1,2,3,2,32,8,2,1,3,1,3,1,3,1,3,1,3,1,3,0,0,4,0,2,4,6,0,0,38,0,11,
		1,0,0,0,2,16,1,0,0,0,4,31,1,0,0,0,6,33,1,0,0,0,8,10,3,2,1,0,9,8,1,0,0,
		0,10,13,1,0,0,0,11,9,1,0,0,0,11,12,1,0,0,0,12,14,1,0,0,0,13,11,1,0,0,0,
		14,15,5,0,0,1,15,1,1,0,0,0,16,17,3,4,2,0,17,21,5,1,0,0,18,20,3,6,3,0,19,
		18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,1,0,0,0,22,24,1,0,0,0,23,
		21,1,0,0,0,24,25,5,8,0,0,25,3,1,0,0,0,26,32,5,4,0,0,27,28,5,2,0,0,28,32,
		5,4,0,0,29,30,5,3,0,0,30,32,5,4,0,0,31,26,1,0,0,0,31,27,1,0,0,0,31,29,
		1,0,0,0,32,5,1,0,0,0,33,34,5,6,0,0,34,35,5,7,0,0,35,36,5,11,0,0,36,37,
		5,10,0,0,37,7,1,0,0,0,3,11,21,31
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
